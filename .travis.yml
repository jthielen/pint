language: python

branches:
  # prevent bors temporary branches to be built
  except:
  - staging.tmp
  - trying.tmp

env:
  # Should pandas tests be removed or replaced wih import checks?
  #- UNCERTAINTIES="N" PYTHON="3.6" NUMPY_VERSION=1.14 PANDAS=1
  - UNCERTAINTIES="N" PYTHON="2.7" NUMPY_VERSION=1.17 PANDAS=0
  - UNCERTAINTIES="N" PYTHON="3.6" NUMPY_VERSION=1.17 PANDAS=0
  - UNCERTAINTIES="N" PYTHON="3.7" NUMPY_VERSION=1.17 PANDAS=0
  - UNCERTAINTIES="N" PYTHON="3.6" NUMPY_VERSION=1.16 PANDAS=0
  - UNCERTAINTIES="N" PYTHON="3.6" NUMPY_VERSION=1.11.2 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.3" NUMPY_VERSION=1.9.2 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.4" NUMPY_VERSION=1.11.2 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.5" NUMPY_VERSION=1.11.2 PANDAS=0
  # - UNCERTAINTIES="Y" PYTHON="3.5" NUMPY_VERSION=1.11.2 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.6" NUMPY_VERSION=1.11.2 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="2.7" NUMPY_VERSION=0 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.5" NUMPY_VERSION=0 PANDAS=0
  # # Test with the latest numpy version
  # - UNCERTAINTIES="N" PYTHON="2.7" NUMPY_VERSION=1.14 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.4" NUMPY_VERSION=1.14 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.5" NUMPY_VERSION=1.14 PANDAS=0
  # - UNCERTAINTIES="Y" PYTHON="3.5" NUMPY_VERSION=1.14 PANDAS=0
  # - UNCERTAINTIES="N" PYTHON="3.6" NUMPY_VERSION=1.14 PANDAS=0

before_install:
  - sudo apt-get update
  - if [[ "$PYTHON" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - if [[ "$PYTHON" != "2.7" ]]; then
      conda config --set restore_free_channel yes;
    fi
  # Useful for debugging any issues with conda
  - conda info -a
  - export ENV_NAME=travis

install:
  - conda create --yes -n $ENV_NAME python=$PYTHON pip
  - source activate $ENV_NAME
  - if [ $UNCERTAINTIES == 'Y' ]; then pip install 'uncertainties==2.4.7.1'; fi
  # - if [ $NUMPY_VERSION != '0' ]; then conda install --yes numpy==$NUMPY_VERSION; fi
  - pip install --upgrade pip setuptools wheel
  - pip install cython
  - pip install --pre --upgrade --timeout=60 -f https://7933911d6844c6c53a7d-47bd50c35cd79bd838daf386af554a83.ssl.cf2.rackcdn.com numpy
  - if [[ $TRAVIS_PYTHON_VERSION == '3.5' && $NUMPY_VERSION == 1.11.2 && $UNCERTAINTIES == "Y" ]]; then pip install babel serialize pyyaml; fi
  # this is superslow but suck it up until updates to pandas are made
  - if [[ $PANDAS == '1' ]]; then pip install numpy cython pytest pytest-cov nbval; pip install git+https://github.com/pandas-dev/pandas.git@bdb7a1603f1e0948ca0cab011987f616e7296167; python -c 'import pandas; print(pandas.__version__)'; fi
  - pip install coveralls

script:
  # if we're doing the pandas tests and hence have pytest available, we can
  # simply use it to run all the tests
  - if [[ $PANDAS == '1' ]]; then python -bb -m coverage run -p --source=pint --omit="*test*","*compat*" -m py.test -rfsxEX; fi
  # test notebooks too if pandas available
  - if [[ $PANDAS == '1' ]]; then pip install -e .; pytest --nbval notebooks/*; fi
  - if [[ $PANDAS == '0' ]]; then python -bb -m coverage run -p --source=pint --omit="*test*","*compat*","*pandas*" setup.py test; fi
  - coverage combine
  - coverage report -m

after_success:
  - coveralls --verbose
